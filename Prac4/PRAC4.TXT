Group: Marq - g14b; Damon - g14h; Megan - g14k0129; Kyle - g12w4298;

Questions -  Available as an ASCII file PRAC4.TXT or Word file PRAC4.DOC to edit


Task 3 - Let's take a trip to the C

   From a purely syntactical viewpoint, are the C and Pascal  expressions
   equivalent - can you think of an expression that one grammar would recognise
   but the other would reject?

	- Semantically they would be different, but syntactically they would be the
    same, therefore they are equivalent.


Task 4 - Expressions - again

   Is this an ambiguous grammar? If so, why? is it an LL(1) grammar? If not,
   why not, and can you find a   suitable grammar that is LL(1)?

	- This grammar is ambiguous, this can be proven by the derivation of the two
    options below for the sentence a - b ^ c - a + b.

	Option 1:
	a - b ^ (c - a + b)
	Term - Term
	Factor - Term
	Primary - Term
	a - Term
	a - Factor
	a - Primary ^ Expression
	a - b ^ Expression
	a - b ^ Term - Term
	a - b ^ Term - Term + Term
	a - b ^ Factor - Term + Term
	a - b ^ Primary - Term + Term
	a - b ^ c - Term + Term
	a - b ^ c - Factor + Term
	a - b ^ c - Primary + Term
	a - b ^ c - a + Term
	a - b ^ c - a + Factor
	a - b ^ c - a + Primary
	a - b ^ c - a + b

	Option 2:
	a - (b ^ c) - a + b
	Term - Term
	Term - Term - Term
	Term - Term - Term + Term
	Factor - Term - Term + Term
	Primary - Term - Term + Term
	a - Term - Term + Term
	a - Factor - Term + Term
	a - Primary ^ Expression - Term + Term
	a - b ^ Expression - Term + Term
	a - b ^ Term - Term + Term
	a - b ^ Factor - Term + Term
	a - b ^ Primary - Term + Term
	a - b ^ c - Term + Term
	a - b ^ c - Factor + Term
	a - b ^ c - Primary + Term
	a - b ^ c - a + Term
	a - b ^ c - a + Factor
	a - b ^ c - a + Primary
	a - b ^ c - a + b

	- It is non-LL(1).  In factor, the optional Expression is nullable and that
    means that all following productions become nullable, as Expression is
    recursive.

	- Expression = Term A .
	A 		   = ("+"|"-") Term A | eps .
	Term     = Factor B .
	B 		   = ("*"|"/") Factor B | eps .
	Factor	 = Primary C .
	C 		   = "^" Expression | eps .
	Primary	 = "a"|"b"|"c" .

	- FIRST(A1) = {+} FIRST(A2) = {-} Intersection is empty.
	  FIRST(B1) = {*} FIRST(B2) = {/} Intersection is empty.
	  FIRST(Primary1) = {a} FIRST(Primary2) = {b} FIRST(Primary3) = {c} Intersection
    is empty.
	*LOOK AT - NOT COMPLETE*.

	- This option below, to surround the non-terminal Expression in Primary with
    brackets, forces it be LL(1).	This would not be syntactically correct but
    would work semantically.

	- COMPILER Expression
	IGNORE CHR(0) .. CHR(31)
	PRODUCTIONS
		Expression = Term    { ( "+" | "-" ) Term  } .
		Term       = Factor  { ( "*" | "/" ) Factor } .
		Factor     = Primary [ "^" "(" Expression ")"] .
		Primary    = "a" | "b" | "c" .
	END Expression.

	- We found a syntactically equivalent grammar that is LL(1) complaint, however
    we cannot find a grammar that is semantically and syntactically equivalent.

	- COMPILER Expression
	IGNORE CHR(0) .. CHR(31)
	PRODUCTIONS
		Expression = Term    { ( "+" | "-" ) Term  } .
		Term       = Factor  { ( "*" | "/" ) Factor } .
		Factor     = Primary [ "^" Primary ] .
		Primary    = "a" | "b" | "c" .
	END Expression.

	- We tested the code by using the F pragma, which returned the trace.txt file,
    which contained the FIRST and FOLLOW sets.

Task 5 - Meet the family

   What form does your grammar take when you eliminate the meta-brackets?

	- The grammar takes on a recursive form, as shown below.

	PRODUCTIONS
    Home      = Family PetsA Vehicle "house" .
	 	PetsA     = Pets PetsA | .
    Pets      = "dog" PetsR | "cat" .
	 	PetsR     = "cat" | .
	 	Vehicle   = TwoWheel "fourbyfour" | .
	 	TwoWheel  =  "scooter" | "bicycle" .
    Family    = Parents ChildrenR .
    Parents   = Parent | "Mom" "Dad" .
	 	Parent    = DadP | MomP .
    DadP      = "Dad" | .
	 	MomP      = "Mom" | .
	 	ChildrenR = Child ChildrenR | .
    Child     =   "Helen" | "Margaret" | "Alice" | "Robyn" | "Cathy"
               		| "Janet" | "Anne" | "Ntombizodwa" | "Ntombizanele" .
	END Home.

   Which, if any, productions break the LL(1) rules, and why?

	- The Child production does not work, as it is never called - making it a
    non-reachable production.  In order to make it work, where "Children" is
    called we changed it to Child.

	- Parents is nullable, therefore Family is nullable.

	- Parents (as well as Pets) production raises the issue of non-determinism.
    Parents = [ "Dad" ] [ "Mom" ] | "Mom" "Dad" . “Mom” is the start of several
    alternatives, as one could choose the first alternative and choose epsilon
    instead of “Dad”, and then have “Mom”; or one could choose the second
    alternative.

	  If it were possible for the computer to look ahead and see whether there was
    a “Dad” following on from “Mom”, there would not be a problem.  However
    LL(1) grammars are context-free	  and so looking ahead of time is not
    possible, and therefore this production does not conform to LL(1) standards.

	- Rule 2 is broken by  Pets and Child non-terminals.
	  FIRST(Pets)= {“dog”, “cat”} FOLLOW(Pets)= {“dog”, “cat”, “scooter”,
    “bicycle”, “house”}.   The FOLLOW set is obtained by looking what comes
    after Pets on the right hand side, which happens to be a nullable piece -
    [Vehicle].  Since [Vehicle] can possible return epsilon, we need to look
    further and include “house” in the FOLLOW set.

	  It is noted that {Pets} is also nullable, and Pets can follow Pets,
    therefore we need to include the FIRST set of Pets in the FOLLOW set. Both
    the FIRST set and FOLLOW set for Pets have “dog” and “cat” in them - which
    clearly breaks Rule 2, which states there needs to be a disjoint between the
    two sets. Similarly the Child non-terminal’s FIRST and FOLLOW sets both
    contain the same names, as a call to Child can be followed by another call
    to Child with the nullable piece {Child} in the Family production.

	- Pets = "dog" [ "cat" ] | "cat" .Pets is ambiguous since "dog" "cat" "cat"
    can be interpreted either by Pets - Pets = "dog" "cat" - "cat"
    OR Pets - Pets - Pets = "dog" - "cat" - "cat”.

    Can you find an equivalent grammar that does obey the LL(1) constraints? If
    so, give it.  If not, explain why you think it cannot be done.

	- It is not possible to find an equivalent LL(1) grammar as this grammar
    intentionally contains productions which are nullable which means that is
    cannot become an LL(1) grammar.

Task 6 - Palindromes

   Does grammar 1 describe palindromes? If not, why not?

	- No it does not describe palindromes, since it never terminates. This also
    means that it does not classify as a grammar.

   Is it an LL(1) grammar? If not, why not?

	- It is not an LL(1) as it never terminates.

   Does grammar 2 describe palindromes? If not, why not?

	- Yes it does.

   Is it an LL(1) grammar? If not, why not?

	- It is not an LL(1) grammar as a and b are the start of several alternatives.

   Does grammar 3 describe palindromes? If not, why not?

	- Yes it does.

   Is it an LL(1) grammar? If not, why not?

	- It is not an LL(1) grammar as a and b are the start and successor of
    nullable structures.

   Does grammar 4 describe palindromes? If not, why not?

	- Yes it does.

   Is it an LL(1) grammar? If not, why not?

	- It is not an LL(1) grammar, as the entire grammar is nullable; and it has
    problems of grammar two and three.

   Can you find a better grammar to describe palindromes? If so, give it, if not,
   explain why not.

  - It is impossible to describe all palindromes, since there can always be
    starts to several alternatives and you can never know if you are in the
    middle of the palindrome.

Task 7


   Are these grammars equivalent?  Is either (or both) ambiguous?  Do either or both conform to the LL(1)
   conditions?  If not, explain clearly where the rules are broken, and come up with an LL(1) grammar that
   describes RPN notation, or else explain why it might be necessary to modify the language itself to overcome
   any problems you have uncovered.

  - These grammars are equivalent.

  - Neither of these languages are ambiguous.

	- G1 is by nature non-deterministic and context-free grammars cannot support
    non-determinism, therefore it does not conform to LL(1) conditions. This
    grammar also makes use of left recursion, which it in itself can never be
    LL(1) compliant.

	- G2 does not conform to the LL(1) conditions as the entire REST production is
    nullable and also recurses upon itself which means that it is both the start
    and successor to a nullable structure.

	- We would have to modify the language itself, to allow for extra symbols such
    as brackets to allow for differentiating between binOP and unaryOp, or be
    able to see ahead if it is a binOp or unaryOp from the terminals used.

Task 8

   Which of the following statements are true?  Justify your answers.

     (a) An LL(1) grammar cannot be ambiguous.

			True. Ambiguous grammars relate to context-sensitive while LL(1) grammars
      are context-free.

     (b) A non-LL(1) grammar must be ambiguous.

			False.  A grammar may be non-ambiguous but still break an LL(1) rule.
			Example:
			A = a[B]a
			B = ab

			While this grammar is non-ambiguous, a is the start (rule 1) and successor
      (rule 2) of several alternatives thus it is non-LL(1).

     (c) An ambiguous language cannot be described by an LL(1) grammar.

			True.  Ambiguous languages relate to context-sensitive while LL(1)
      grammars are context-free.

     (d) It is possible to find an LL(1) grammar to describe any non-ambiguous language.

			False.  You can have a non-ambiguous grammar that is still
      non-deterministic, and LL(1) grammars cannot be non-deterministic.
