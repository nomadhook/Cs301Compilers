  COMPILER ParvaTest $CN
  /* Parva level 1 grammar  - Coco/R for C# (EBNF)
     P.D. Terry, Rhodes University, 2003
     Grammar only 
	 Worked on by Marq Botha - 14B7599; Damon Hook - 14H0114; Megan Kingon - 14K0129; Kyle Wallace - 12W4298 */

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "0123456789" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter [{ letter | digit | "_" } (letter | digit) ] .
    number     = digit { digit } .
    stringLit  = '"' { stringCh | backslash printable } '"' .
    charLit    = "'" ( charCh   | backslash printable ) "'" .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    ParvaTest             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | ConstDeclarations | VarDeclarations
                        | Assignment | IfStatement | WhileStatement | DoWhileStatement | ForStatement
                        | ReturnStatement | HaltStatement
                        | ReadStatement | WriteStatement 
						| "continue" | "break" .
    ConstDeclarations = "const" OneConst { "," OneConst } ";" .
    OneConst          = identifier "=" Constant .
    Constant          =   number | charLit
                        | "true" | "false" | "null" .
    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = Designator { "," Designator } ( "=" | AssignmentOP ) Expression { "," Expression } ";" .
    Designator        = identifier [ "[" Expression "]" ] .
    IfStatement       = "if" "(" Condition ")" Statement [Else] .
	Else              = "elsif" "(" Condition ")" Statement [Else] | "else" Statement . 
    DoWhileStatement  = "do" Statement "while" "(" Condition ")" .
	WhileStatement    = "while" "(" Condition ")" Statement .
	ForStatement      = "for" (identifier "=" Expression) ("to" | "downto") Expression Statement . 
    ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
    ReadStatement     = "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
	Expression  = AndExp { OrOp AndExp } .
  AndExp      = EqExp { AddOp EqExp } .
  EqExp       = RelExp [ EqOp RelExp ] .
  RelExp      = AddExp [ RelOp AddExp ] .
  AddExp      = MulExp { "&&" MulExp } .
  MulExp      = Factor { MulOp Factor } .
  Factor      = Designator | Constant
                | "new" BasicType "[" Expression "]"
                | NegOp Factor | "(" Expression ")" .
  NegOp       = "!" .
  MulOp       = "*" | "/" | "%" .
  AddOp       = "+" | "-" .
  RelOp       = "<" | "<=" | ">" | ">=" .
  EqOp        = "==" | "!=" .
  OrOp        = "||" .
  AssignmentOP      = "*=" | "/=" | "+=" | "-=" | "&=" | "|=" | "%=" .
  Type              = BasicType [ "[]" ] .
  BasicType         = "int" | "bool" .
  
  END ParvaTest.
