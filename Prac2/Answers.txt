
Task 3.
	a) Short-circuit evaluation is not used. This is determined by the fact that it loads X,Y and Z at the same time, and tests them all before branching, instead of testing them in stages.
	c) Adding branches during critical calculations, such as OR when the 1st boolean is true, will mean that it uses short-circuit boolean operations. 
	d) Change all the PRNB (Print Bolean) to PRNI (Print Int) works.
	
Task 4.
	Using 550 Primes, 2000 iterations.
	197471523 Operations. 
	ASM1 Run Time 00:00:14.19
	ASM2 Run Time 00:00:04.9
	
	ASM2 is clearly faster than ASM1 for larger iterations (2000 used since it also times user input).
	Since ASM1 uses auxiliary methods, while ASM2 uses in-line methods, the results are what we expected. 
	ASM2 uses the more efficient method thus has a lower time.
	
Task 5.
	It completely stops when you give it a number that is the limit or above.
	We added a while loop to check for those, and looped within them until a valid input was given.
	
Task 6.
	na**
	
Task 7.
	        case PVM.div:           // integer division (quotient)
            tos = Pop(); 
			if (tos == 0) {ps = divZero; break;} //changed this to catch tos as 0
			Push(Pop() / tos);
            break;
			
			case PVM.div:           // integer division (quotient)
            tos = mem[cpu.sp++]; 
			if (tos == 0) {ps = divZero; break;}
			mem[cpu.sp] /= tos; //here
            break;
			
            case PVM.mul:           // integer multiplication
            //tos = Pop(); Push(Pop() * tos); //*
			int tos1 = Pop(); int tos2 = Pop(); 
			if (tos1 > maxInt/tos2) //made changes here. Dividing the maxInt by one of the inputs shows what the max of another input can be.
				{ps = badVal; break;}
			Push(tos1*tos2); //*
            break;
			
			case PVM.mul:           // integer multiplication
            //tos = mem[cpu.sp++]; mem[cpu.sp] *= tos; //*
			tos = mem[cpu.sp++]; 
			if (tos > maxInt/mem[cpu.sp]) {  //made changes here. Dividing the maxInt by one of the inputs shows what the max of another input can be.
				ps = badVal; break;
			}
			mem[cpu.sp] *= tos; //*
            break;
			
Task 8.
			case PVM.inpc:
			adr = Pop();
            if (InBounds(adr)) {
              mem[adr] = data.ReadInt();
              if (data.Error()) ps = badData;
            }
            break;
		    case PVM.prnc:
			if (tracing) results.Write(padding);
            results.Write(Pop());
            if (tracing) results.WriteLine();
			break;
			
			case PVM.inpc:          // character input
		    mem[mem[cpu.sp++]] = data.ReadInt();
            break; 
            case PVM.prnc:          // character output
//            if (tracing) results.Write(padding);
            results.Write(mem[cpu.sp++], 0);
//            if (tracing) results.WriteLine();
            break;

Task 11.
	ASM1  101 primes 69434018 operations.  Run Time 00:00:01.10
	ASM2  101 primes 69434018 operations.  Run Time 00:00:00.50