
Task 3.
	a) Short-circuit evaluation is not used. This is determined by the fact that it loads X,Y and Z at the same time, and tests them all before branching, instead of testing them in stages.
	c) Adding branches during critical calculations, such as OR when the 1st boolean is true, will mean that it uses short-circuit boolean operations. 
	d) Change all the PRNB (Print Bolean) to PRNI (Print Int) works.
	
Task 4.
	Using 550 Primes, 2000 iterations.
	197471523 Operations. 
	ASM1 Run Time 00:00:14.19
	ASM2 Run Time 00:00:04.9
	
	ASM2 is clearly faster than ASM1 for larger iterations (2000 used since it also times user input).
	Since ASM1 uses auxiliary methods, while ASM2 uses in-line methods, the results are what we expected. 
	ASM2 uses the more efficient method thus has a lower time.
	
Task 5.
	It completely stops when you give it a negative number, or a number that is the limit or above.
	We added a while loop to check for those, and looped within them until a valid input was given.
	
Task 6.
	na