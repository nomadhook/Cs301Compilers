
   1 // Sieve of Eratosthenes for finding primes 2 <= n <= Max (Parva version)
   2 // P.D. Terry,  Rhodes University, 2016
   3 
   4   void Main() {
   5     const Max = 32000;
   6     bool[] uncrossed = new bool[Max];          // the sieve
   7     int i, n, k, it, iterations, primes = 0;   // counters
   8     read("How many iterations? ", iterations);
   9     bool display = (iterations == 1);
  10     read("Supply largest number to be tested ", n);
  11     if (n > Max) {
  12       write("n too large, sorry");
  13       return;
  14     }
  15     write("Prime numbers between 2 and " , n, "\n");
  16     write("-----------------------------------\n");
  17     it = 1;
  18     while (it <= iterations) {
  19       primes = 0;
  20       i = 2;
  21       while (i <= n) {                         // clear sieve
  22         uncrossed[i-2] = true;
  23         i = i + 1;
  24       }
  25       i = 2;
  26       while (i <= n) {                         // the passes over the sieve
  27         if (uncrossed[i-2]) {
  28 	      int counter = 0;
  29           if (display && (counter == 0)) { 
  30 			write("\n");  // ensure line not too long 
  31 			counter = 0;
  32 		  }
  33           primes = primes + 1;
  34 		  counter = counter + 1;
  35           if (display) write(i, "\t");
  36           k = i;                               // now cross out multiples of i
  37           while (k <= n) {
  38             uncrossed[k-2] = false;
  39             k = k + i;
  40           }
  41           i = i + 1;
  42         }
  43       }
  44       it = it + 1;
  45       if (display) write("\n");
  46     }
  47     write(primes, " primes");
  48   } //main

0 errors detected
